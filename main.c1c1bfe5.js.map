{"version":3,"sources":["scripts/main.js"],"names":["field","score","button","document","querySelector","fieldRows","gameScore","messageStart","messageWin","messageLose","cellsInRow","startGame","textContent","spawnRandomCell","startKeyboardListener","rowIndex","Math","floor","random","columnIndex","renderCells","r","c","rows","cells","className","classList","add","addEventListener","arrowKeyAction","e","oldField","JSON","parse","stringify","key","moveRight","moveLeft","moveUp","moveDown","hasFieldChanged","haveMoves","remove","removeEventListener","isWin","filterZero","row","newRow","filter","length","push","move","i","canMove","canMerge","canSlide","haveFreeCells","some","cell","haveMerges","reverse","contains"],"mappings":"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","file":"main.c1c1bfe5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst fieldRows = document.querySelector('tbody');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nlet field;\nlet score;\nconst cellsInRow = 4;\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n    startGame();\n  } else {\n    startGame();\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n});\n\nfunction startGame() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n  gameScore.textContent = score;\n  spawnRandomCell();\n  startKeyboardListener();\n}\n\nfunction spawnRandomCell() {\n  while (true) {\n    const rowIndex = Math.floor(Math.random() * cellsInRow);\n    const columnIndex = Math.floor(Math.random() * cellsInRow);\n\n    if (field[rowIndex][columnIndex] === 0) {\n      field[rowIndex][columnIndex] = Math.random() >= 0.9 ? 4 : 2;\n      break;\n    }\n  }\n\n  renderCells();\n};\n\nfunction renderCells() {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      fieldRows.rows[r].cells[c].className = '';\n      fieldRows.rows[r].cells[c].classList.add(`field-cell`);\n      fieldRows.rows[r].cells[c].classList.add(`field-cell--${field[r][c]}`);\n      fieldRows.rows[r].cells[c].textContent = field[r][c] || '';\n    }\n  }\n}\n\nfunction startKeyboardListener() {\n  document.addEventListener('keydown', arrowKeyAction);\n}\n\nfunction arrowKeyAction(e) {\n  const oldField = JSON.parse(JSON.stringify(field));\n\n  switch (e.key) {\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  if (hasFieldChanged(oldField)) {\n    spawnRandomCell();\n    gameScore.textContent = score;\n  }\n\n  if (!haveMoves()) {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', arrowKeyAction);\n  }\n\n  if (isWin()) {\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction filterZero(row) {\n  const newRow = row.filter(r => r !== 0);\n\n  while (newRow.length < cellsInRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction move(row) {\n  let newRow = row;\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  return newRow;\n}\n\nfunction canMove(row) {\n  for (let i = 0; i < row.length - 1; i++) {\n    const canMerge = (row[i] === row[i + 1]) && (row[i] !== 0);\n    const canSlide = (row[i] === 0) && (row[i + 1] !== 0);\n\n    if (canMerge || canSlide) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction haveMoves() {\n  const haveFreeCells = field.some(row => row.some(cell => cell === 0));\n  let haveMerges = false;\n\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow - 1; c++) {\n      if (field[r][c] === field[r][c + 1]) {\n        haveMerges = true;\n        break;\n      }\n    }\n  }\n\n  for (let r = 0; r < cellsInRow - 1; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      if (field[r][c] === field[r + 1][c]) {\n        haveMerges = true;\n        break;\n      }\n    }\n  }\n\n  return haveFreeCells || haveMerges;\n}\n\nfunction isWin() {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      if (field[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasFieldChanged(oldField) {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      if (oldField[r][c] !== field[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moveRight() {\n  for (let r = 0; r < cellsInRow; r++) {\n    let row = field[r];\n\n    if (canMove([...row].reverse())) {\n      row = move(row.reverse()).reverse();\n\n      for (let c = 0; c < row.length; c++) {\n        field[r][c] = row[c];\n      }\n    }\n  }\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < cellsInRow; r++) {\n    let row = field[r];\n\n    if (canMove(row)) {\n      row = move(field[r]);\n\n      for (let c = 0; c < row.length; c++) {\n        field[r][c] = row[c];\n      }\n    }\n  }\n}\n\nfunction moveUp() {\n  for (let c = 0; c < cellsInRow; c++) {\n    let row = [\n      field[0][c],\n      field[1][c],\n      field[2][c],\n      field[3][c],\n    ];\n\n    if (canMove(row)) {\n      row = move(row);\n\n      for (let r = 0; r < cellsInRow; r++) {\n        field[r][c] = row[r];\n      }\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < cellsInRow; c++) {\n    let row = [\n      field[0][c],\n      field[1][c],\n      field[2][c],\n      field[3][c],\n    ];\n\n    if (canMove([...row].reverse())) {\n      row = move(row.reverse()).reverse();\n\n      for (let r = 0; r < cellsInRow; r++) {\n        field[r][c] = row[r];\n      }\n    }\n  }\n}\n"]}